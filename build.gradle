//./gradlew getConflicts -Pbranches=FT-Rspec-Merge02

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org._10ne.gradle:rest-gradle-plugin:0.4.2"
	}
}

apply plugin: "org.tenne.rest"

import groovy.json.JsonSlurper
import groovy.transform.Field

ant.importBuild 'prpcServiceUtils/scripts/utils/Jenkins-export.xml'
ant.importBuild 'prpcServiceUtils/scripts/utils/prpcServiceUtilsWrapper.xml'

@Field String SOR_URL = 'https://lab0430.lab.pega.com'
//@Field String SOR_URL = 'http://192.168.99.100:9080'
//@Field String SOR_URL = 'https://pizzasor.dev.pega.io'

task importApplication {
	doLast{
		println "Importing application"

	}

}

task exportApplication {
	doLast {
		println "Exporting application"
	}
	

}

task importProduct {
	doLast {
		println "Importing product"

	}

}

task exportProduct{
	doLast {
		println "Exporting product"
	}
}

task createRestorePoint {
	doLast {
		String rp = createRP(SOR_URL);
		println rp
		def rpFile = new File("restorepoint.txt");
		rpFile.write(rp)
	}
}

task revertToLastRestorePoint {
	doLast {
		def rpFile = new File("restorepoint.txt");
		String rpName = rpFile.readLines();
		rollbackToRP(SOR_URL, rpName)
	}
}

task getConflicts {
	doLast {
		def responseJson = branchesAPI(SOR_URL,branches,'conflicts')
		//MERGE_CONFLICTS_COUNT = responseJson.conflictsCount
		ant.propertyfile(file: "gradle.properties") {
			entry(key:"mergeConflictsCount", value:responseJson.conflictsCount)
		}
		if(!responseJson.conflictsCount.equals("0")){
			ant.propertyfile(file: "gradle.properties") {
				entry(key:"mergeConflicts", value:responseJson.conflicts)
			}
			println 'Found conflicts ' + responseJson.conflicts
			throw new BuildCancelledException('Number of conflicts : ' + responseJson.conflictsCount)
		}
	}
}

task merge {
	doLast {
		def responseJson = branchesAPI(SOR_URL,branches,'merge')
		//MERGE_ID = responseJson.ID
		ant.propertyfile(file: "gradle.properties") {
			entry(key:"mergeId", value:responseJson.ID)
		}
		//ant.properties['env.MERGE_ID'] = responseJson.ID
		println 'Merge Response Queue ID : ' + responseJson.ID
	}
}

task merge2(type: org._10ne.gradle.rest.RestTask) {
	group 'Pega'
	description 'Do some merging.'

	def branch = findProperty("branch")
	def targetURL = findProperty("targetURL")

	httpMethod = 'get'
	uri = "${targetURL}/prweb/api/v1/branches/${branch}/merge"

	username = project.pegaUsername
	password = project.pegaPassword

	contentType = groovyx.net.http.ContentType.JSON
	responseHandler = {
		// Once we get a valid response, we can pick apart
		println it.toString()
	}

	doFirst {
		// Validate project properties
		if (!project.hasProperty("branch") || !project.hasProperty('targetURL')) {
			throw new InvalidUserDataException("Must supply '-Pbranch' and '-PtargetURL'")
		}
	}
}

task getMergeStatus {
	doLast {
		println "Trying to get merge status for : " + mergeId
		def responseJson = mergesAPI(SOR_URL)
		println "Get Merge Status Message : " + responseJson.statusMessage
		if(responseJson.statusMessage.equals("Processing")){
			//Merge still Processing
			ant.propertyfile(file: "gradle.properties") {
				entry(key:"mergeStatus", value:responseJson.statusMessage)
			}
			//MERGE_STATUS = "Processing"
			throw new BuildCancelledException('The merge status for ' + mergeId + 'is still ' + responseJson.statusMessage)
		} else if (responseJson.statusMessage.equals("Success")){
			//Merge Succesful
			ant.propertyfile(file: "gradle.properties") {
				entry(key:"mergeStatus", value:responseJson.statusMessage)
			}
			//MERGE_STATUS = "Success"
			println 'Merge is complete for : ' + mergeId + '.. Status Message : ' + responseJson.statusMessage
		} else {
			//Possible Conflicts?
			ant.propertyfile(file: "gradle.properties") {
				entry(key:"mergeStatus", value:responseJson.statusMessage)
			}
			println 'Error while performing merge for :' + mergeId 
			println 'Errors : ' + responseJson.errors
			if(responseJson.conflictsCount > 0){
				println 'Conflicts : ' + responseJson.conflicts
			}
			//MERGE_STATUS = "Error"
			throw new BuildCancelledException('Error while merging for ' + mergeId + responseJson.statusMessage)
		}
	}
}

task executePegaUnitTests {

	doLast {
		println "Executing PegaUnit tests for application : " + application
		def responseJson = pegaUnitAPI(SOR_URL, accessGroup, testLocation, '')

		if (userNamePassword) {
			ant.propertyfile(file: "gradle.properties") {
				byte[] authEncBytes = Base64.encodeBase64(userNamePassword.getBytes());
				String authStringEnc = new String(authEncBytes);
				entry(key:"username_temp", value:authStringEnc)

			}
		}
	}
}

/***** HELPERS *****/

Object pegaUnitAPI(String url, String accessGroup, String locationOfTestResults, String testSuite){
	String fullURL = url + '/prweb/PRRestService/PegaUnit/Rule-Test-Unit-Case/pzExecuteTests'
	// if (username) {
	// 	def http = new RESTClient(fullURL)
	// 	http.client.addRequestInterceptor(new HttpRequestInterceptor() {
 //    		void process(HttpRequest httpRequest, HttpContext httpContext) {
 //        		httpRequest.addHeader('Authorization', 'Basic ' + username.bytes.encodeBase64().toString())
 //    		}
	// 	})
	// 	def response = http.get(path: "aResource")
	// 	return response
	// } else {
		return callRestAPI(openHttpConnectiontoExecuteTests(fullURL, accessGroup, locationOfTestResults, testSuite))
}

Object branchesAPI(String url, String context, String subresource){
	String fullURL = url + '/prweb/api/v1/branches/' + context + '/' + subresource
	return callRestAPI(openHttpConnection(fullURL))
}

Object mergesAPI(String url) {
	String fullURL = url + '/prweb/api/v1/merges/' + mergeId
	return callRestAPI(openHttpConnection(fullURL))
}

Object createRP(url) {
	String serviceUrl = url +'/prweb/PRRestService/SystemManagement/V2/RestorePoint';
	def resJson = callRestAPI(serviceUrl, "{\"action\":\"create\"}");
	String rpName = resJson.pxRestorePoints.pxRestorePointName;
	rpName = rpName.replaceAll('\\[','');
	rpName = rpName.replaceAll("]","");
	return rpName;
}

Object rollbackToRP(url, restorePointName) {
	String serviceUrl = url +'/prweb/PRRestService/SystemManagement/V2/rollbackasync';
	def resJson = callRestAPI(serviceUrl, "{\"action\":\"SystemRollback\", \"restorePointName\":\"" + restorePointName + "\", \"async\":\"false\"}");
	System.out.println(resJson);
	//return resJson.pxRestorePoints.pxRestorePointName.toString();
}

HttpURLConnection openHttpConnectiontoExecuteTests(url, String accessGroup, String locationOfTestResults, String testSuite){
	HttpURLConnection httpConn = openHttpConnection(url);
	httpConn.addRequestProperty("AccessGroup", accessGroup);
	httpConn.addRequestProperty("LocationOfTestResults", locationOfTestResults);
	httpConn.addRequestProperty("TestSuite", testSuite);
	return httpConn;
}

HttpURLConnection openHttpConnection(url) {
	
		HttpURLConnection httpConn = (HttpURLConnection)(new URL(url)).openConnection();	
	

	return httpConn;
}



Object callRestAPI(HttpURLConnection httpConn) {
	String responseText;
	//HttpURLConnection httpConn = (HttpURLConnection)(new URL(url)).openConnection();
	// if (username) {
	// 	def http = new RESTClient('')
 //    	http.headers['Authorization'] = 'Basic '+username.getBytes('iso-8859-1').encodeBase64()
 //    	println "HERE 3423"
	// } else {
	// 	byte[] authEncBytes = Base64.encodeBase64(username.getBytes());
	// 	String authStringEnc = new String(authEncBytes);
 //    	httpConn.addRequestProperty("Authorization", "Basic " + authStringEnc);
 //    }

	InputStream responseStream;
	if (httpConn.getResponseCode() == 400 || httpConn.getResponseCode() == 404) {
		responseStream = httpConn.getErrorStream();
	} else {
		responseStream = httpConn.getInputStream();
	}
	responseText = responseStream.getText()
	def responseJson = new JsonSlurper().parseText(responseText)
	if(responseJson.errors){
		//println "callRestAPI error :" + responseJson.errors
		throw new BuildCancelledException("callRestAPI error :" + responseJson.errors.ID + "-" + responseJson.errors.message)
	} else {
		return responseJson
	}
}