//./gradlew getConflicts -Pbranches=FT-Rspec-Merge02

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org._10ne.gradle:rest-gradle-plugin:0.4.2"
	}
}

apply plugin: "base"
apply plugin: "org.tenne.rest"

import com.pega.pw2017.ResultHandler

ant.importBuild 'prpcServiceUtils/scripts/utils/Jenkins-export.xml'
ant.importBuild 'prpcServiceUtils/scripts/utils/prpcServiceUtilsWrapper.xml'

ext {
	resultHandler = new ResultHandler(project)
}

task importApplication {
	doLast{
		println "Importing application"
	}
}

task exportApplication {
	doLast {
		println "Exporting application"
	}
}

task importProduct {
	doLast {
		println "Importing product"

	}
}

task exportProduct{
	doLast {
		println "Exporting product"
	}
}

task createRestorePoint(type: org._10ne.gradle.rest.RestTask) {
	group 'Pega'
	description 'Create restore point.'

	def targetURL = findProperty("targetURL")
	uri = "${targetURL}/PRRestService/SystemManagement/V2/RestorePoint"

	username = project.pegaUsername
	password = project.pegaPassword

	httpMethod = 'post'
	contentType = groovyx.net.http.ContentType.JSON
	responseHandler = { response ->
		def restorepointName = response.pxRestorePoints[0].pxRestorePointName

		resultHandler.putResult("restorepoint.name", restorepointName)
		println "Success: ${response.toString()}"
	}

	doFirst {
		// Validate project properties
		if (!project.hasProperty('targetURL')) {
			throw new InvalidUserDataException("Must supply '-PtargetURL'")
		}
	}
}

task revertToLastRestorePoint(type: org._10ne.gradle.rest.RestTask) {
	group 'Pega'
	description 'Create restore point.'

	def restorepointName = resultHandler.getResult("restorepoint.name")
	def targetURL = findProperty("targetURL")
	uri = "${targetURL}/PRRestService/SystemManagement/V2/rollback/${restorepointName}?action=SystemRollback"

	username = project.pegaUsername
	password = project.pegaPassword

	httpMethod = 'post'
	contentType = groovyx.net.http.ContentType.JSON

	responseHandler = { response ->
		println "Success: ${response.toString()}"
	}

	doFirst {
		// Validate project properties
		if (!project.hasProperty('targetURL')) {
			throw new InvalidUserDataException("Must supply '-PtargetURL'")
		}
	}
}

task getConflicts(type: org._10ne.gradle.rest.RestTask) {
	group 'Pega'
	description 'Check for branch conflict.'

	def branch = findProperty("branch")
	def targetURL = findProperty("targetURL")

	httpMethod = 'get'
	uri = "${targetURL}/api/v1/branches/${branch}/conflicts"

	username = project.pegaUsername
	password = project.pegaPassword

	contentType = groovyx.net.http.ContentType.JSON
	responseHandler = { response ->
		if (response.conflictsCount as int == 0) {
			println "No conflicts!"
		} else {
			println "Conflicts found: ${response.conflicts}"
			throw new BuildCancelledException("Found '${response.conflictsCount}' conflicts.")
		}
	}

	doFirst {
		// Validate project properties
		if (!project.hasProperty("branch") || !project.hasProperty('targetURL')) {
			throw new InvalidUserDataException("Must supply '-Pbranch' and '-PtargetURL'")
		}
	}
}

task merge(type: org._10ne.gradle.rest.RestTask) {
	group 'Pega'
	description 'Merge a branch.'

	def branch = findProperty("branch")
	def targetURL = findProperty("targetURL")

	httpMethod = 'get'
	uri = "${targetURL}/api/v1/branches/${branch}/merge"

	username = project.pegaUsername
	password = project.pegaPassword

	contentType = groovyx.net.http.ContentType.JSON
	responseHandler = { response ->
		resultHandler.putResult("merge.id", response.ID)
		println "Merge Response Queue ID : $response.ID"
	}

	doFirst {
		// Validate project properties
		if (!project.hasProperty("branch") || !project.hasProperty('targetURL')) {
			throw new InvalidUserDataException("Must supply '-Pbranch' and '-PtargetURL'")
		}
	}
}

task getMergeStatus(type: org._10ne.gradle.rest.RestTask) {
	group 'Pega'
	description 'Check merge status.'

	def mergeId = resultHandler.getResult("merge.id")
	def targetURL = findProperty("targetURL")

	httpMethod = 'get'
	uri = "${targetURL}/api/v1/merges/${java.net.URLEncoder.encode(mergeId, "UTF-8")}"

	username = project.pegaUsername
	password = project.pegaPassword

	contentType = groovyx.net.http.ContentType.JSON
	responseHandler = { response ->
		resultHandler.putResult("merge.status", response.statusMessage)
		if(response.statusMessage.equals("Processing")){
			//Merge still Processing
			throw new BuildCancelledException("The merge status for '${mergeId}' is still '${response.statusMessage}'.")
		} else if (response.statusMessage.equals("Success")){
			//Merge Succesful
			println "Merge is complete for '${mergeId}', Status Message: '${response.statusMessage}'"
		} else {
			//Possible Conflicts?
			println "Error while performing merge for: '${mergeId}'"
			println "Errors: '${response.errors}'"
			if((response.conflictsCount as int) > 0){
				println "Conflicts: ${response.conflicts}"
			}
			//MERGE_STATUS = "Error"
			throw new BuildCancelledException("Error while merging for '${mergeId}' '${response.statusMessage}'")
		}
	}

	doFirst {
		// Validate project properties
		if (!project.hasProperty('targetURL')) {
			throw new InvalidUserDataException("Must supply '-PtargetURL'")
		}
	}
}

task executePegaUnitTests {

	/*
	doLast {
		println "Executing PegaUnit tests for application : " + application
		def responseJson = pegaUnitAPI(SOR_URL, accessGroup, testLocation, '')

		if (userNamePassword) {
			ant.propertyfile(file: "gradle.properties") {
				byte[] authEncBytes = Base64.encodeBase64(userNamePassword.getBytes());
				String authStringEnc = new String(authEncBytes);
				entry(key:"username_temp", value:authStringEnc)

			}
		}
	}
	*/
}
